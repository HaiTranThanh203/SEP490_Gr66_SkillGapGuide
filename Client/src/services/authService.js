import  {supabase}  from '../config/supabase';
import axios from 'axios';
import { ENDPOINTS } from '../constants/apiEndpoints';
import { apiService } from './api';
const API_URL = import.meta.env.VITE_API_URL;

// Th√™m event custom ƒë·ªÉ theo d√µi thay ƒë·ªïi auth
const authStateChange = new Event('authStateChanged');

export const authService = {
async loginWithEmail(email, password) {
    try {
      const response = await apiService.post(ENDPOINTS.auth.login, {
        email,
        password,
      });
     
      
      if (response.result && response.result.token) {
        localStorage.setItem('token', response.result.token);
        // Dispatch event khi login th√†nh c√¥ng
        window.dispatchEvent(authStateChange);
        return response.data;
      }
    } catch (error) {
      if (error.code === 'ERR_CONNECTION_REFUSED') {
        throw new Error('Unable to connect to server. Please check if the backend server is running.');
      }
      // Pass the error message from backend
      throw new Error(error.response?.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }
  },

  async registerWithEmail(email, password,fullName,phone) {
    try {
      const response = await apiService.post(ENDPOINTS.auth.register, {
        email,
        password,
        fullName,
        phone
      });
      return response;
    } catch (error) {
      throw error;
    }
  },

// authService.js
async loginWithGoogle() {
  if (!supabase) throw new Error('Supabase client not initialized');

  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: `${window.location.origin}/auth/callback`,
      scopes: 'email profile',
      queryParams: {
        access_type: 'offline',
        prompt: 'select_account'
      }
    }
  });

  if (error) {
    // Ch·ªâ log khi th·ª±c s·ª± c√≥ error
    console.error('Supabase OAuth error:', error.message);
    throw error;
  }

  // Kh√¥ng log g√¨ n·∫øu th√†nh c√¥ng!
  return data;
}
,

  logout() {
    localStorage.clear();
    // Dispatch event khi logout
    window.dispatchEvent(authStateChange);
    return supabase.auth.signOut();
  },

  // async getCurrentUser() {
  //   const { data: { user } } = await supabase.auth.getUser();
  //   return user;
  // },

async sendUserToBackend(session) {
    if (!session) throw new Error('No Supabase session');

    const user = session.user;
    const { id, email, user_metadata } = user;
    const userData = {
     
      email,
      name: user_metadata?.full_name || user_metadata?.name || "",
      avatar: user_metadata?.avatar_url || "",
      accessToken: session.access_token,
       supabaseId: id,
    };

   try {
  const response = await axios.post(`${API_URL}/api/auth/google`, userData);
  console.log("üîê Sending user to backend:", response);
  
  if (response.data.result.token) {
    localStorage.setItem('token', response.data.result.token);
    window.dispatchEvent(authStateChange);
  }
  // return response.data.result;
} catch (error) {
  if (error.response?.status === 409) {
    alert("Email n√†y ƒë√£ ƒëƒÉng k√Ω b·∫±ng t√†i kho·∫£n kh√°c. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng ƒë√∫ng ph∆∞∆°ng th·ª©c ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
  } else {
    alert("C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c Google. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
  }
  throw error;
}

},

};