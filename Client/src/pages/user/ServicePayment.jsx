import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import TopMenu from "./TopMenu";
import qrImage from "/images/qr-demo.png";
import vnpayLogo from "/images/vnpay.png";
import { subscriptionService } from "../../services/subscriptionService";
import { paymentService } from "../../services/paymentService"; // <-- th√™m

// B·∫£ng t√≠nh nƒÉng cho t·ª´ng g√≥i
const featureGroups = [
  {
    title: "üìÅ T·∫£i l√™n CV & m√¥ t·∫£ c√¥ng vi·ªác",
    items: [
      { feature: "T·∫£i l√™n CV c·ªßa b·∫°n", values: [true, true, true] },
      { feature: "T·∫£i l√™n m√¥ t·∫£ c√¥ng vi·ªác", values: [true, true, true] },
      { feature: "Nh·∫≠p link m√¥ t·∫£ c√¥ng vi·ªác t·ª´ TOPCV", values: [true, true, true] },
    ],
  },
  {
    title: "üíº C√¥ng vi·ªác ph√π h·ª£p",
    items: [
      { feature: "Danh s√°ch c√¥ng vi·ªác ph√π h·ª£p", values: [false, true, true] },
      { feature: "ƒê·ªô ph√π h·ª£p CV v√† v·ªã tr√≠ c√¥ng vi·ªác", values: [false, true, true] },
    ],
  },
  {
    title: "üß† Ph√¢n t√≠ch k·ªπ nƒÉng & Kh√≥a h·ªçc",
    items: [
      { feature: "K·ªπ nƒÉng hi·ªán t·∫°i c·ªßa b·∫°n", values: [false, false, true] },
      { feature: "K·ªπ nƒÉng c√≤n thi·∫øu", values: [false, false, true] },
      { feature: "K·ªπ nƒÉng y√™u c·∫ßu c·ªßa t·ª´ng m√¥ t·∫£ c√¥ng vi·ªác", values: [false, false, true] },
      { feature: "ƒê·ªô ph√π h·ª£p gi·ªØa k·ªπ nƒÉng hi·ªán t·∫°i v√† y√™u c·∫ßu", values: [false, false, true] },
      { feature: "Nh·∫≠n ƒë·ªãnh chung k·ªπ nƒÉng c·ªßa b·∫°n v√† m√¥ t·∫£", values: [false, false, true] },
      { feature: "Danh s√°ch kh√≥a h·ªçc g·ª£i √Ω", values: [false, false, true] },
      { feature: "Th√™m kh√≥a h·ªçc y√™u th√≠ch", values: [false, false, true] },
      { feature: "Theo d√µi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô kh√≥a h·ªçc", values: [false, false, true] },
    ],
  },
];

const planDescriptions = [
  "Mi·ªÖn ph√≠ d√†nh cho c√°c c√° nh√¢n mu·ªën t·∫£i l√™n CV v√† nh·∫≠n ƒë∆∞·ª£c danh s√°ch k·ªπ nƒÉng hi·ªán t·∫°i.",
  "D√†nh cho c√°c c√° nh√¢n mu·ªën ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß k·ªπ nƒÉng t·ª´ m√¥ t·∫£ c√¥ng vi·ªác c·ª• th·ªÉ.",
  "Bao g·ªìm m·ªçi t√≠nh nƒÉng c·ªßa g√≥i ph·ªï th√¥ng, theo d√µi ti·∫øn ƒë·ªô h·ªçc v√† c√°c t√≠nh nƒÉng cao c·∫•p.",
];

const planButtons = ["‚ûú Ti·∫øp t·ª•c", "‚ûú ƒêƒÉng k√Ω", "‚ûú ƒêƒÉng k√Ω"];

const ServicePayment = () => {
  const navigate = useNavigate();
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("");
  const [plans, setPlans] = useState([]);
  const [payLoading, setPayLoading] = useState(false); // <-- loading khi g·ªçi VNPAY
  const [payError, setPayError] = useState(""); // <-- l·ªói n·∫øu c√≥

  // L·∫•y danh s√°ch g√≥i t·ª´ API
  useEffect(() => {
    async function fetchPlans() {
      try {
        const data = await subscriptionService.getAllSubscriptions();
        const actives = (data || []).filter((g) => g.status === "active");
        actives.sort((a, b) => a.type - b.type); // type: 0-Trial, 1-Basic, 2-Premium

        // ‚ö†Ô∏è Quan tr·ªçng: gi·ªØ l·∫°i subscriptionId (tu·ª≥ backend: id ho·∫∑c subscriptionId)
        const mapped = actives.map((item, idx) => ({
          subscriptionId: item.id ?? item.subscriptionId, // <-- ch·ªânh theo schema th·∫≠t c·ªßa b·∫°n
          name: item.subscriptionName,
          price:
            item.price === 0 ? "0 VNƒê" : `${item.price.toLocaleString("vi-VN")} VNƒê / 1 th√°ng`,
          amount: item.price,
          description: planDescriptions[idx] || "",
          button: planButtons[idx] || "‚ûú ƒêƒÉng k√Ω",
        }));
        setPlans(mapped);
      } catch {
        setPlans([]);
      }
    }
    fetchPlans();
  }, []);

  // Khi ch·ªçn g√≥i
  const handleSelectPlan = (plan) => {
    setPayError("");
    if (plan.amount === 0) {
      navigate("/cv-upload-options");
    } else {
      setSelectedPlan(plan);
      setPaymentMethod("");
    }
  };

  // G·ªçi API t·∫°o giao d·ªãch VNPAY v√† redirect
  const handlePayWithVnpay = async () => {
    if (!selectedPlan?.subscriptionId) {
      setPayError("Kh√¥ng t√¨m th·∫•y m√£ g√≥i (subscriptionId).");
      return;
    }
    try {
      setPayLoading(true);
      setPayError("");

      const res = await paymentService.create(selectedPlan.subscriptionId);
      const paymentUrl = res?.paymentUrl;

      if (!paymentUrl) {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c paymentUrl t·ª´ m√°y ch·ªß.");
      }

      window.location.href = paymentUrl; // redirect t·ªõi VNPAY
    } catch (e) {
      console.error(e);
      setPayError(
        e?.response?.data?.message ||
          e?.message ||
          "T·∫°o giao d·ªãch VNPay th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i."
      );
      setPayLoading(false); // gi·ªØ popup m·ªü ƒë·ªÉ user th·ª≠ l·∫°i
    }
  };

  // Popup thanh to√°n n·ªïi l√™n
  const renderPaymentPopup = () => {
    if (!selectedPlan) return null;

    const handleConfirmTransfer = () => {
      alert("C·∫£m ∆°n b·∫°n! H·ªá th·ªëng s·∫Ω x√°c nh·∫≠n thanh to√°n trong gi√¢y l√°t.");
      setSelectedPlan(null);
      setPaymentMethod("");
    };

    return (
      <div className="fixed inset-0 z-50 backdrop-blur-[2px] flex items-center justify-center">
        <div className="relative bg-white p-8 rounded-2xl shadow-2xl w-[380px] border border-blue-200 animate-fadeIn">
          {/* N√∫t ƒë√≥ng popup */}
          <button
            onClick={() => {
              setSelectedPlan(null);
              setPaymentMethod("");
              setPayError("");
              setPayLoading(false);
            }}
            className="absolute top-2 right-3 w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 text-2xl text-gray-400 hover:text-red-500 transition"
            aria-label="ƒê√≥ng"
          >
            &times;
          </button>

          <h3 className="text-blue-600 font-bold text-lg mb-4 text-center">
            Thanh to√°n ‚Äì {selectedPlan.name}
          </h3>

          <p className="font-medium text-sm mb-2 text-center">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</p>

          {/* QR radio */}
          <label className="flex items-center gap-2 mb-3 text-sm cursor-pointer">
            <input
              type="radio"
              name="method"
              value="qr"
              checked={paymentMethod === "qr"}
              onChange={(e) => setPaymentMethod(e.target.value)}
              className="accent-blue-500"
            />
            <span className="text-blue-600 font-medium">Thanh to√°n qua QR code</span>
          </label>

          {/* VNPay radio */}
          <label className="flex items-center gap-2 mb-4 text-sm cursor-pointer">
            <input
              type="radio"
              name="method"
              value="vnpay"
              checked={paymentMethod === "vnpay"}
              onChange={(e) => setPaymentMethod(e.target.value)}
              className="accent-blue-500"
            />
            <span className="text-gray-800 font-medium">Thanh to√°n qua VNPay</span>
            <img src={vnpayLogo} alt="VNPay" className="h-5 ml-1" />
          </label>

          {/* QR code */}
          {paymentMethod === "qr" && (
            <>
              <div className="flex items-center justify-center relative mb-2">
                <img src={qrImage} alt="QR code" className="w-40 h-40 rounded-xl border border-blue-100" />
              </div>
              <p className="text-center text-red-600 text-sm font-semibold">
                M·ª©c ph√≠: {selectedPlan.amount.toLocaleString()} VNƒê
              </p>
              <p className="text-xs text-gray-500 text-center mt-1">
                (Kh√°ch h√†ng vui l√≤ng kh√¥ng thay ƒë·ªïi n·ªôi dung chuy·ªÉn kho·∫£n)
              </p>
              <div className="mt-4">
                <button
                  onClick={handleConfirmTransfer}
                  className="bg-green-600 hover:bg-green-700 text-white font-semibold w-full py-2 rounded-lg shadow mt-2 transition"
                >
                  ‚úÖ T√¥i ƒë√£ chuy·ªÉn kho·∫£n
                </button>
              </div>
            </>
          )}

          {/* VNPay redirect */}
          {paymentMethod === "vnpay" && (
            <div className="mt-4 border rounded-lg bg-blue-50 p-4 text-sm text-center">
              <p className="text-gray-700 mb-2">
                B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ªõi c·ªïng thanh to√°n VNPay.
              </p>

              {payError && (
                <p className="text-red-600 text-xs mb-2">{payError}</p>
              )}

              <button
                className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold shadow transition disabled:opacity-60"
                onClick={handlePayWithVnpay}
                disabled={payLoading}
              >
                {payLoading ? "ƒêang t·∫°o giao d·ªãch..." : "Ti·∫øp t·ª•c thanh to√°n"}
              </button>

              <p className="text-[11px] text-gray-500 mt-2">
                G√≥i: <b>{selectedPlan.name}</b> ‚Ä¢ M·ª©c ph√≠:{" "}
                <b>{selectedPlan.amount.toLocaleString()} VNƒê</b>
              </p>
            </div>
          )}
        </div>
      </div>
    );
  };

  // B·∫£ng t√≠nh nƒÉng
  const renderFeatureGroup = (title, featureList) => (
    <div className="space-y-2" key={title}>
      <h3 className="text-md font-semibold text-gray-700">{title}</h3>
      <div className="border border-blue-300 rounded-xl overflow-hidden text-sm">
        <table className="w-full border-separate border-spacing-0">
          <thead className="bg-blue-50 text-gray-800 font-semibold text-center">
            <tr>
              <th className="border px-4 py-3 text-left w-[50%]">T√≠nh nƒÉng</th>
              <th className="border px-4 py-3">Mi·ªÖn ph√≠</th>
              <th className="border px-4 py-3">G√≥i n√¢ng cao</th>
              <th className="border px-4 py-3">G√≥i to√†n di·ªán</th>
            </tr>
          </thead>
          <tbody>
            {featureList.map((item, idx) => (
              <tr key={idx} className="text-center align-top hover:bg-blue-50 transition">
                <td className="border px-4 py-3 text-left text-gray-800">{item.feature}</td>
                {item.values.map((value, i) => (
                  <td key={i} className="border px-4 py-3">
                    {value ? (
                      <span className="text-green-500 text-lg font-bold">‚úî</span>
                    ) : (
                      <span className="text-gray-400 text-lg font-bold">‚úñ</span>
                    )}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );

  return (
    <>
      <div className="max-w-7xl mx-auto">
        <TopMenu />
      </div>
      <div className="bg-white min-h-screen p-6 max-w-6xl mx-auto space-y-8">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Thanh to√°n ‚Äì ƒêƒÉng k√Ω g√≥i d·ªãch v·ª•</h2>

        {/* Danh s√°ch g√≥i d·ªãch v·ª• */}
        <div className="grid md:grid-cols-3 gap-4">
          {plans.length > 0 ? (
            plans.map((plan, idx) => (
              <div
                key={idx}
                className="border border-blue-300 rounded-xl p-5 shadow-sm bg-white flex flex-col items-center hover:shadow-lg transition"
              >
                <h3 className="font-semibold text-lg text-gray-800 mb-1 text-center">{plan.name}</h3>
                <p className="text-red-600 font-semibold text-sm text-center">{plan.price}</p>
                <p className="text-sm text-gray-700 mt-2 text-center min-h-[56px]">
                  {plan.description}
                </p>
                <div className="mt-6 w-full flex justify-center">
                  <button
                    className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 text-sm rounded-md font-semibold w-full transition"
                    onClick={() => handleSelectPlan(plan)}
                  >
                    {plan.button}
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="col-span-3 text-center text-gray-400 italic py-10">
              Kh√¥ng c√≥ g√≥i d·ªãch v·ª• n√†o kh·∫£ d·ª•ng.
            </div>
          )}
        </div>

        {/* B·∫£ng t√≠nh nƒÉng */}
        {featureGroups.map((group) => renderFeatureGroup(group.title, group.items))}

        {/* Popup thanh to√°n */}
        {renderPaymentPopup()}
      </div>
    </>
  );
};

export default ServicePayment;
